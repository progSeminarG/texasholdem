#! /usr/bin/env python3

import random
import numpy as np
import os

class Player(object):
    def get_know_dealer(self,dealer_input):
        self.dealer = dealer_input
    def get_hand(self,list_of_cards):
        self.cards = list_of_cards
    def open_cards(self):
        return self.cards
    def respond(self):
        return random.choice([ 'call', 'fold', int(10)])

class ShiraiAI(Player):
    def __init__(self):
        self.ct=0
        self.mat=[ np.array([[  -1.6,  -85.8,    7.5,  -52.8,   14.5,   -9.5,   36.5,  -11.2,
          -4.7,   -2.2],
       [ -11.5,  -54.3,  -25.6,   35.8,    9. ,   27.1,   26.7,  -45.1,
          68.2,   30.2],
       [ -81.2,  -37.7,   61.1,   80. ,   -4.5,  -61. ,   59.1,  -37.5,
         -52.2,  -24.5],
       [ -13.7,   34.6,  -34.4,  -50.9,  -45.8,   17.9,  -13.7,    1.3,
         104.3,  -10.3],
       [  -3.7,   55.2,  -28.6,    4.6,  -11.6,   37.3,   17. ,  -52. ,
          14.4,  -40.9],
       [ -17.1,  -41.3,  -33.5,  -13.9,   27.4,   21.3,  -16.5,   19.7,
          78.4,  -80.6],
       [ -29.7,   75.6,   48.7,   19.4,  -54. ,  101.6,   65.9,   26.5,
          86.8,   24.2],
       [  -6.4,    4.6,   39.9,   62.3,  -54.5,   -2. ,   12.5,   27.4,
          44.9,   46.6],
       [  55.7,  -96. ,  -48.1,  -13.5,    2.4,  -40.6,   -3.8,  -71.8,
          14.9,   12.1]]),
 np.array([[  18.7,   31.3,   -5.9,  -17.3,    2.1,  -66.3,  -19.4,   37.1,
        -114.2,   88.1],
       [  22.4,  -33.5,  -58.5,  -29.6,  -52.4,  -39.3,  -27.2,  -23.5,
           3.8,    4.3],
       [  11. ,  -39.4,  -39. ,  -26.3,  -30.2,   64.1,   37.8,   28.7,
         -30.3,  -47. ],
       [ -33.1,   -5.6,   39.7,  -56.2,    3.4,   89.8,   34.4,   -4.6,
          14.8,   20.2],
       [ -38.6,  -33.8,  -80.9,   24.5,  -18.6,   55.1,  -24.5,    1.6,
           8.6,   12.5],
       [  29.1,  106.7,   19.9,   28.5,   25.6,   42.5,   -1.8,  116.5,
           8.8,    2.3],
       [ -28.7,  -10.6,   12.6,  -13. , -102.6,  -21.3,   14.2,    9.1,
          77.3,  -24.5],
       [ -11.7,  126.7,   56.1,   81.8, -110.6,    0.2,    7.5,   14.3,
          -9.4,   88.2],
       [   9.2,   27.9,  -65.8,  -49. ,   11.2,   -5. ,   58.8,  -11. ,
         -22.3,   75.7],
       [  55. ,   18.8, -112.2,   -7.2,   10.2,   40.1,  -30.8,   26.2,
          81.2,  -11.1]]),
 np.array([[  25. ,  -26.3,   61.5,  -63.1,   80.9,   36.4,  -16.8,   93.3,
          85.6,  -12.6],
       [   2.5,    0.8,   76. ,   -1.5,   19.4,   23.9,   50.9,   52.3,
          48.9,  -42.4],
       [   8.9,  -15.6,   65.8,  -28.5,   77.3,   15.5,   24.3,  -13.8,
          62.8,    6.5],
       [ -59. ,   29.8,  -45.9,  -55.9,   56.8,   -7.2,   26. ,  -28.1,
          33.7,  -25.7],
       [  60. ,   45.3,  -14.5,  -35.9,   54.9,  -31.8,   31.4,   26.2,
          -0.2,   92.8],
       [  72.8,   67.7,    8.7,  -66.2,   12.3,   71.8,    2.3,   93.5,
          84.7,  112.4],
       [ -20. ,   30.8,   45.9,   20.8,  -42.1,   39.7, -110.4,  -66.1,
         -25.6,  -72.7],
       [ -13.7,   18.4,  -54.4,   68.2,   13.6,  -60.1,   -1. ,   98.7,
          -1. ,  -42.1],
       [ -37.1,  -36.6,    3. ,   20.4,  -29.3,  -78.4,  -64.7,   16.9,
          28.1,    8. ],
       [  43.5,    9.9,   -0.2,  -31.2,  -11.4,   36.5,   -0.3,  -40.7,
        -121.7,  -13.3]]),
 np.array([[ -1.57000000e+01,   1.00000000e-01,  -5.40000000e+00,
         -6.03000000e+01,  -7.20000000e+00,  -2.00000000e+00,
          1.00000000e+00,  -2.36000000e+01,  -7.28000000e+01,
         -7.11000000e+01],
       [  2.85000000e+01,  -3.58000000e+01,   7.96000000e+01,
         -6.55000000e+01,  -1.14000000e+01,   6.07000000e+01,
         -4.95000000e+01,  -4.50000000e+01,  -1.30000000e+00,
         -2.20000000e+00],
       [  1.28000000e+01,  -7.10000000e+00,  -5.68000000e+01,
          1.00000000e+01,   8.50000000e+01,   4.80000000e+01,
         -6.36000000e+01,   3.39000000e+01,   2.62000000e+01,
         -5.01000000e+01],
       [  1.08900000e+02,   4.16000000e+01,   4.20000000e+00,
          5.16000000e+01,  -2.10000000e+01,   3.10000000e+01,
          7.32000000e+01,  -9.80000000e+00,   6.20000000e+00,
         -1.39000000e+01],
       [  4.22000000e+01,  -2.57000000e+01,   2.22000000e+01,
          4.50000000e+00,  -2.21000000e+01,  -2.64000000e+01,
          3.22000000e+01,   4.87000000e+01,  -4.03000000e+01,
          9.08000000e+01],
       [  2.70000000e+00,   2.40000000e+00,   1.50000000e+00,
          2.89000000e+01,  -3.39000000e+01,  -1.62000000e+01,
          2.32000000e+01,   1.61000000e+01,  -3.88000000e+01,
          2.20000000e+00],
       [  1.12000000e+01,  -6.29000000e+01,   5.29000000e+01,
          2.86000000e+01,  -6.09000000e+01,   1.47000000e+01,
         -2.56000000e+01,  -4.78000000e+01,   4.00000000e-01,
          6.60000000e+01],
       [ -7.13000000e+01,  -1.02100000e+02,  -3.39000000e+01,
         -8.95000000e+01,   7.64000000e+01,   2.38000000e+01,
         -1.50000000e+00,  -1.40000000e+00,  -3.50000000e+01,
          7.97000000e+01],
       [ -7.66000000e+01,   4.58000000e+01,  -8.91000000e+01,
         -3.80000000e+00,  -1.71000000e+01,  -3.05000000e+01,
          7.29000000e+01,  -1.37000000e+01,   1.08000000e+01,
         -4.60000000e+00],
       [  6.86000000e+01,  -1.88000000e+01,   1.37000000e+01,
         -6.95000000e+01,  -8.40000000e+00,  -2.65000000e+01,
          7.59000000e+01,  -8.80000000e+00,  -1.20000000e+02,
          1.07000000e+01]]),
 np.array([[ -61.8,  -26.5,  -48.1],
       [ -11.2,  -39.5,  -42.4],
       [  -7.3,  -22. ,  -12.3],
       [  54.4, -101.3,  -15.7],
       [ -12.2,  -13. ,    8.8],
       [  43.8,  -32.5,   16.4],
       [  10.2,   33.4,  -35.2],
       [  -7.4, -109.1,   71.2],
       [  94.8,  -41.9,   43. ],
       [  24.9,  -34.5,   85.9]])]

    def respond(self):
        if self.ct==0:
            self.inimon=\
                sum(self.dealer.list_of_money)/len(self.dealer.list_of_money)
            self.presc=self.inimon
            self.ct=1
        my_money=\
            self.dealer.list_of_money[
            self.dealer.list_of_players.index('ShiraiAI')] #arg1
        
        cards=self.dealer.field+self.cards
        (fsc, fbc)=self.dealer.calc_hand_score(self.dealer.field) #arg2
        (msc, mbc)=self.dealer.calc_hand_score(cards) #arg3
        
        fmax=max([fbc[i][1] for i in range(len(fbc))]+[0]) #arg4
        mmax=max([mbc[i][1] for i in range(len(mbc))]+[0]) #arg5
        if fmax==1:
            fmax=14
        if mmax==1:
            mmax=14
        mbet=self.dealer.minimum_bet #arg6
        maxmon=max(self.dealer.list_of_money) #arg7
        args=np.array([self.inimon, my_money, 100*fsc, 100*msc, 10*fmax, 10*mmax, mbet, maxmon, 10*len(cards)])
        print("args--",args)
        
        a1=np.dot(args,self.mat[0])
        a1=self.relu(a1)
        a2=np.dot(a1,self.mat[1])
        a2=self.relu(a2)
        #a3=np.dot(a2,self.mat[2])
        #a3=self.relu(a3)
        #a4=np.dot(a3,self.mat[3])
        #a4=self.relu(a3)
        a5=np.dot(a2,self.mat[4])
        rtmat=self.relu(a5)
        
        rtvec=self.softmax(rtmat)
        '''
        if len(cards)==7:
            f=open("rtvec.txt","a")
            f.write(str(args)+"\n")
            f.write(str(rtvec)+"\n")
            f.close()
        '''
        if max(rtvec)==rtvec[0]:
            rt='call'
        elif max(rtvec)==rtvec[1]:
            rt='fold'
        else:
            rt=int( (my_money/0.67)*rtvec[2]-(my_money/2) )
        print("rt--",rt)
        
        self.presc=my_money
        return rt

    def relu(self,x):
        rl=np.maximum(0,x)
        return rl

    def softmax(self,a):
        c=np.min(a)
        return (a)/(np.sum(a)+0.0001)
