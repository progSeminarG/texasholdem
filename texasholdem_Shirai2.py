#! /usr/bin/env python3

import random
import numpy as np
import os

class Player(object):
    def get_know_dealer(self,dealer_input):
        self.dealer = dealer_input
    def get_hand(self,list_of_cards):
        self.cards = list_of_cards
    def open_cards(self):
        return self.cards
    def respond(self):
        return random.choice([ 'call', 'fold', int(10)])

class Shirai2AI(Player):
    def __init__(self):
        self.ct=0
        self.mat=[np.array([[ -491.44603556,  -195.07035386,  1724.51972379,   721.97614617,
           51.51668338,   117.9314427 ,  -963.14167817,   503.08460223,
          579.05863491,  -532.87310793],
       [-1395.68459896,  1312.25736236,   187.23869659,   866.97312371,
          464.92804117,  1227.42112596, -1091.73012302,  1133.69151754,
        -1080.1730709 ,  -565.29748685],
       [ 1092.47606177,  -493.79386063, -1099.47331602,  -272.13381181,
         -706.24588214,   281.64182479,   533.27363185,   481.2317697 ,
         1372.62131243,   419.74933712],
       [  -43.79756211,  -422.82692271,  -191.32396327,  -590.15528176,
          481.57017935,  1192.31774762,  -654.48729181,   133.82410662,
          966.9092952 ,   168.83118343],
       [   48.60815076,  1271.19860659,  1620.91545042, -2221.44857887,
        -1705.09401304,  -973.46585582,  -371.27578399,  1962.79860742,
         -362.56851276, -1270.87159318],
       [-1782.32502345, -1180.84372001,  1469.59792562,   600.17053393,
         -783.44001001,   488.42188131,  -122.381588  ,  -298.39393166,
         1161.09244968,   162.78122901],
       [ 2155.92405129,  1995.5087113 ,   825.8663131 ,   805.50321011,
        -1171.48823374,   132.22056247,  1100.71383432, -1279.62614928,
           -9.62220246, -1704.69605115],
       [  729.43264152, -1203.921887  ,   477.16817247, -1647.7474318 ,
          936.02990579, -1266.54649156, -1810.76084174,   432.95924034,
          -45.09137846, -1886.35576282],
       [ -881.42222487,   178.84811721, -2503.89013603,   853.77209778,
          166.14221732,  -688.87680888,   617.1085347 ,    71.12514766,
         1253.91762276,  -404.65180697]]),
 np.array([[ -130.98597126,   820.92308097,  1134.54814118,   122.01891573,
         1536.68122101,  -615.4170685 ,  -938.63111314,   377.70984421,
        -1473.47853166,  -186.13507891],
       [-1554.11038405,  1963.68619833,  2202.43973609,  -504.67057257,
        -1056.11389627,  1886.55773834,  -880.00208822,  1182.58470504,
         1078.49382315,  -233.23506098],
       [-1080.41792329, -1133.76075164,   542.80510095,  -364.44461161,
          723.80612668, -1965.04533816,  -568.59231038,  -269.9836919 ,
         1070.95172816,   513.16368833],
       [ 1008.6243735 ,  -488.85205283,   349.06654912,  -146.26000181,
         1405.59492121,   422.81287255,   679.69419879, -1098.3522966 ,
        -1373.14103221,  -597.11977253],
       [ 2198.32660522,  1897.41197992,   476.62329397,   261.16991984,
         -181.56341107,  1299.73235863, -1092.05852635,   624.99223557,
          991.07501095,   893.21781444],
       [ 1379.75181796,   153.84652853,   -55.20208112,  -997.95782047,
         -380.06408904,  1391.85173216,   259.01012374,  -522.31691239,
         -917.9934115 ,  -831.84940596],
       [   19.36414835, -1593.49711151,  -725.52390028,  -160.74923671,
         1547.11415781,    67.16568601,   275.34121574,   -49.88815996,
         -485.60202634,  1059.86227667],
       [ -454.14934323,  -329.38463743, -1392.83129579,  -772.92368128,
          -74.6756277 ,  1525.33011952,  -828.23110612, -1926.87808458,
           40.00483629, -1131.24213141],
       [-1556.93463314,  -173.00106078,  -115.83736447,  1684.24271561,
         1828.46293569,   133.08528744,  1280.95748317,  1093.88297997,
          454.35156062,  1774.6983978 ],
       [ -768.09493071,   556.87335986,   523.09052684,   750.64340572,
         -530.4463316 ,  -683.58790308,  -356.89790152, -1257.34761003,
          484.88989761,   167.89124363]]),
 np.array([[ -246.22022955,  1737.06738178, -1342.74199415, -1397.13162955,
           41.60297889, -2706.28627052, -1983.88249225, -3535.75178207,
         -940.45226088,  -243.32945999],
       [ -268.05387307,  2517.82231215,   276.16229955, -2876.24120776,
        -1339.53830652, -1487.8037434 ,  1243.79596743,  -135.28611038,
         1378.13733953,   -71.95001092],
       [  513.62640615,   202.24666416,  1611.19829005,  1445.89502316,
          900.27873493,   598.71603731,  1004.12996069, -1068.35622094,
         -762.13812681,    92.75372688],
       [ 1592.70147862,  1295.14168514,   519.43900631,   425.18082462,
          140.40619748, -2325.52724272,   980.97183293,   225.92466608,
         -340.890906  ,  1464.19450225],
       [  -47.61885507, -1053.44828244,   -77.82030696,  -686.08347615,
          228.29779648,  -192.22442651,  2106.50587475,  1122.32912632,
         1918.08281618, -1302.01773092],
       [  458.92998731,  -962.42234842,  -162.10156047,  -286.71630887,
         1975.68890605,   570.4277813 ,  -406.49424633,  -540.98496799,
          267.17509536, -1086.28469079],
       [ -784.04687366,   226.69673344, -2219.91899183,   909.14959804,
          331.26933851,  -598.22139057,  -294.21438245, -1336.23487107,
          120.29819556,  -737.26245042],
       [  877.48494369,    -5.45424253,  1424.61964317,  -525.09157539,
         -412.04697714,  -702.53755716,  -254.10474705,  1518.74107149,
         -953.29737807,  1255.13296507],
       [   93.46996836,  -466.6681852 ,    96.97865851,  1029.10379534,
        -1087.64262604,   296.72155964,  1430.72806043,   624.96078006,
          324.50426597,  -219.08824037],
       [  -95.43232994, -1751.29177563, -1666.14985694,  1165.48210899,
          -93.95271866,  -444.97873524,   350.07952038,   231.73695777,
        -1225.16904542,  2836.14598299]]),
 np.array([[-1085.56236876, -1476.61079229,  -378.67869883],
       [  829.92355922,   375.05912018,   756.96802094],
       [ -376.34398046,   245.58232545,  -321.77748821],
       [  654.172701  , -2137.85268665,   -95.85473713],
       [  -14.79054595,  -382.56559316,   313.59511309],
       [ 1115.57612203,  1159.22025428,  -466.20361365],
       [-1554.0639932 ,  -206.48366975,   294.58833156],
       [ -202.89649323, -1025.49969433,    16.12209995],
       [ -234.82829864, -1603.49475704,   467.96748024],
       [  862.08263903, -1539.46872339,   107.94671373]])]

    def respond(self):
        if self.ct==0:
            self.inimon=\
                sum(self.dealer.list_of_money)/len(self.dealer.list_of_money)
            self.presc=self.inimon
            self.ct=1
        my_money=\
            self.dealer.list_of_money[
            self.dealer.list_of_players.index('Shirai2AI')] #arg1
        
        cards=self.dealer.field+self.cards
        (fsc, fbc)=self.dealer.calc_hand_score(self.dealer.field) #arg2
        (msc, mbc)=self.dealer.calc_hand_score(cards) #arg3
        
        fmax=max([fbc[i][1] for i in range(len(fbc))]+[0]) #arg4
        mmax=max([mbc[i][1] for i in range(len(mbc))]+[0]) #arg5
        mbet=self.dealer.minimum_bet #arg6
        maxmon=max(self.dealer.list_of_money) #arg7
        args=np.array([self.inimon, my_money, fsc, msc, fmax, mmax, mbet, maxmon, len(cards)]) #initial vector
        print("args--",args)
        
        
        a1=np.dot(args,self.mat[0])
        a1=self.relu(a1)
        a2=np.dot(a1,self.mat[1])
        a2=self.relu(a2)
        a3=np.dot(a2,self.mat[2])
        a3=self.relu(a3)
        a4=np.dot(a3,self.mat[3])
        self.rtmat=self.relu(a4)
        
        rtvec=self.softmax(self.rtmat)
        print("rtvec--",rtvec)
        
        if max(rtvec)==rtvec[0]:
            rt='call'
        elif max(rtvec)==rtvec[1]:
            rt='fold'
        else:
            rt=int( (my_money/0.67)*rtvec[2]-(my_money/2) )
        print("rt--",rt)
        
        self.presc=my_money
        return rt

    def relu(self,x):
        rl=np.maximum(0,x)
        return self.softmax(rl)

    
    def softmax(self,a):
        c=np.max(a)
        return np.exp(a-c)/np.sum(np.exp(a-c))
